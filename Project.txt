Maven Web Application (30M)
---------------------------------------------
Fix errors in pom.xml – Ensure <groupId>, <artifactId>, <version>, and <packaging> are correct. 
Run:
mvn clean install

Servlet API dependency:
<dependency>
  <groupId>javax.servlet</groupId>
  <artifactId>javax.servlet-api</artifactId>
  <version>4.0.1</version>
  <scope>provided</scope>
</dependency>

MySQL Connector/J dependency:
<dependency>
  <groupId>mysql</groupId>
  <artifactId>mysql-connector-j</artifactId>
  <version>8.0.33</version>
</dependency>

Package & Deploy WAR file:
Package with:
mvn clean package

Output WAR → target/SmartAssessmentHub.war
Copy to Tomcat:
<TOMCAT_HOME>/webapps/

Start Tomcat → access at http://localhost:8080/SmartAssessmentHub.

-------------------------------
Git(30M)
-------------
Configure Git:
git config --global user.name "Your Name"
git config --global user.email "your@email.com"

Initialize:
git init

Commit:
git add .
git commit -m "Added automated grading module"

Status:
git status

History:
git log --oneline --author="Your Name"

New branch:
git checkout -b feedback-module

Merge feedback-module:
git checkout main
git merge feedback-module
# Resolve conflicts manually if needed

Patch file:
git diff > bugfix.patch
git apply bugfix.patch

Push branch:
git checkout -b analytics-dashboard
git push origin analytics-dashboard

Check diff local vs remote:
git fetch origin
git diff main origin/main

========================================================
Docker for Maven Web App
-----------------------------------------
docker --version

docker images

Pull hello-world:
docker run hello-world

Run python interactive:
docker run -it python:3.9

Dockerfile (Tomcat base):
FROM tomcat:9.0
COPY target/SmartAssessmentHub.war /usr/local/tomcat/webapps/
EXPOSE 8080
CMD ["catalina.sh", "run"]

Build & run image:
docker build -t smarthub-image .
docker run -d -p 8080:8080 smarthub-image

List containers:
docker ps -a

Start & stop:
docker stop <id>
docker start <id>

Push image:
docker tag smarthub-image your-dockerhub-username/smarthub-image
docker push your-dockerhub-username/smarthub-image

View logs:
docker logs <container_id>
===========================================================
Docker Compose (10M)
-----------------------------------
docker-compose.yml
version: '3'
services:
  tomcat:
    image: your-dockerhub-username/smarthub-image
    ports:
      - "8080:8080"
    depends_on:
      - db

  db:
    image: mysql:8.0
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: sahdb
    ports:
      - "3306:3306"
    volumes:
      - db_data:/var/lib/mysql

volumes:
  db_data:

Run:
docker-compose up -d
docker ps

Access Tomcat → http://localhost:8080

Enter MySQL container & create table:
docker exec -it <db_container_id> mysql -u root -p
CREATE TABLE students (id INT PRIMARY KEY, name VARCHAR(100));

==========================================


1️⃣ Dockerfile for a Java JAR project
Minimal Dockerfile (single JAR)
# Use official OpenJDK image
FROM openjdk:17-jdk-slim

# Set working directory
WORKDIR /app

# Copy the JAR file from target folder
COPY target/Food-system-xyz.jar app.jar

# Set entrypoint to run the jar
ENTRYPOINT ["java", "-jar", "app.jar"]


Build & run commands:

mvn clean package
docker build -t my-jar-app .
docker run -it -p 8080:8080 --name jar-container my-jar-app


✅ Works for any standalone JAR with a main class.

Optional: Dockerfile with environment variable
FROM openjdk:17-jdk-slim
WORKDIR /app
COPY target/Food-system-xyz.jar app.jar
ENV JAVA_OPTS="-Xms256m -Xmx512m"
ENTRYPOINT ["sh","-c","java $JAVA_OPTS -jar app.jar"]


This is used if you want custom JVM memory settings.
-====================================
2️⃣ Dockerfile for a WAR project (Tomcat)

WAR files need a servlet container like Tomcat.

# Base image with Tomcat
FROM tomcat:9.0-jdk17-openjdk-slim

# Remove default webapps
RUN rm -rf /usr/local/tomcat/webapps/*

# Copy WAR to webapps folder
COPY target/myapp.war /usr/local/tomcat/webapps/ROOT.war

# Expose Tomcat port
EXPOSE 8080

# Start Tomcat
CMD ["catalina.sh", "run"]


Build & run:

mvn clean package
docker build -t my-war-app .
docker run -it -p 8080:8080 --name war-container my-war-app

Optional: WAR + environment variables
FROM tomcat:9.0-jdk17
ENV JAVA_OPTS="-Xmx512m"
COPY target/myapp.war /usr/local/tomcat/webapps/ROOT.war
EXPOSE 8080
CMD ["sh","-c","catalina.sh run"]
=================================================
3️⃣ Docker Compose for JAR + MySQL

This is multi-container setup for your JAR app + database persistence.

docker-compose.yml

version: "3.9"

services:
  app:
    build: .
    container_name: jar-app
    ports:
      - "8080:8080"
    depends_on:
      - db
    environment:
      SPRING_DATASOURCE_URL: jdbc:mysql://db:3306/appdb
      SPRING_DATASOURCE_USERNAME: root
      SPRING_DATASOURCE_PASSWORD: password

  db:
    image: mysql:8.0
    container_name: mysql-db
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: password
      MYSQL_DATABASE: appdb
    ports:
      - "3306:3306"
    volumes:
      - db_data:/var/lib/mysql

volumes:
  db_data:


Commands:

docker-compose up -d    # Start both containers
docker-compose ps       # Check running containers
docker exec -it mysql-db mysql -uroot -ppassword   # Access MySQL
==============================
4️⃣ Docker Compose for WAR + Tomcat + MySQL
version: "3.9"

services:
  web:
    build: .
    container_name: tomcat-app
    ports:
      - "8080:8080"
    depends_on:
      - db

  db:
    image: mysql:8.0
    container_name: mysql-db
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: password
      MYSQL_DATABASE: webappdb
    ports:
      - "3306:3306"
    volumes:
      - db_data:/var/lib/mysql

volumes:
  db_data:


Place your WAR Dockerfile in the same directory as this docker-compose.yml.

Run docker-compose up -d to start Tomcat + MySQL together.



===================================

Docker CLI Commands with redis
Step 1: Pull the redis Image
Command:
docker pull redis
Step 2: Run a Redis Container
Command:
docker run --name my-redis -d redis
What It Does:
• Creates and starts a container named my-redis from the redis image.
• The -d flag runs the container in the background.
Step 3: Check Running Containers
Command:
docker ps
What It Does:
• Lists all running containers.
Step 4: Access Redis
Command:
docker exec -it my-redis redis-cli
Opens the Redis command-line tool (redis-cli) inside the container.
Example Redis Commands:
127.0.0.1:6379> SET name "Alice"
OK
127.0.0.1:6379> GET name
"Alice"
Step 5: Stop the Redis Container
Command:
docker stop my-redis
What It Does:
• Stops the Redis container but doesn’t delete it.
Step 6: Restart the Redis Container
Command:
docker start my-redis
What It Does:
• Restarts the stopped container.
Step 7: Remove the Redis Container
Command:
docker rm my-redis
What It Does:
• Deletes the container permanently.
Step 8: Remove the Redis Image
Command:
docker rmi redis
What It Does:
• Deletes the Redis image from your local system.
2.Working with Docker file
A Docker file is a text file with instructions to create a custom Docker image.
Step 1: Set Up Your Folder
1. Windows:
o Create a folder like C:\DockerProjects\Redis.
o Open Git Bash and navigate to the folder:
cd /c/DockerProjects/Redis
2. Mac/Linux:
o Create a folder:
mkdir ~/DockerProjects/Redis
cd ~/DockerProjects/Redis
Step 2: Write the Dockerfile
1. Inside the folder, create a file named Dockerfile (no extension).
2. Add the following content:
FROM redis:latest
CMD ["redis-server"]
Docker Commands (Step-by-step):
1. docker build -t redisnew  .
What it does:
• This creates (builds) a Docker image using the recipe (Dockerfile) in the current
folder (.).
• -t redisnew: Gives the image a name/tag ("redisnew"), so you can find it easily.
2. docker run --name myredisnew -d redisnew
What it does:
• Starts a new container (mini computer) from the redisnew image.
• --name myredisnew: Names the container "myredisnew" so it’s easy to identify.
• -d: Runs the container in the background.
3. docker ps
What it does:
• Shows a list of containers that are running right now.
4. docker stop myredisnew
What it does:
• Stops the container named "myredisnew" (like turning off a computer).
5. docker login
What it does:
• Logs you into your Docker Hub account, so you can upload images.
6. docker ps -a
What it does:
• Shows a list of all containers, including stopped ones.
7. docker commit 0e993d2009a1 budarajumadhurika/redis1
What it does:
• Takes a snapshot (saves changes) of the container with ID 0e993d2009a1 and creates a
new image called budarajumadhurika/redis1.
8. docker images
What it does:
• Lists all images saved on your system.
9. docker push budarajumadhurika/redis1
What it does:
• Uploads the image budarajumadhurika/redis1 to Docker Hub, so others can download
it.
10. docker rm 0e993d2009a1
What it does:
• Deletes the container with ID 0e993d2009a1.
11. docker rmi budarajumadhurika/redis1
What it does:
• Deletes the image budarajumadhurika/redis1 from your system.
12. docker ps -a
What it does:
Shows all containers again to confirm changes.
13. docker logout
What it does:
• Logs you out of Docker Hub.
14. docker pull budarajumadhurika/redis1
What it does:
• Downloads the image budarajumadhurika/redis1 from Docker Hub.
15. docker run --name myredis -d budarajumadhurika/redis1
What it does:
• Starts a new container using the image budarajumadhurika/redis1.
16. docker exec -it myredis redis-cli
What it does:
• Opens the Redis command-line interface (like a terminal) inside the running container
myredis.
17. SET name "Abcdef"
What it does:
• Saves a key-value pair in Redis (key = name, value = Abcdef).
18. GET name
What it does:
• Retrieves the value of the key name from Redis (it will return "Abcdef").
19. exit
What it does:
• Exits the Redis CLI.
20. docker ps -a
What it does:
• Shows all containers again to check their status.
21. docker stop myredis
What it does:
• Stops the container myredis.
22. docker rm 50a6e4a9c326
What it does:
• Deletes the container with ID 50a6e4a9c326.
23. docker images
What it does:
• Lists all images again to confirm which ones remain.
24. docker rmi budarajumadhurika/redis1
What it does:
• Deletes the image budarajumadhurika/redis1 again.
Step 3: Remove Login Credentials (Optional)
If you no longer need to be logged in, you can log out:
docker logout
What It Does:
• Logs you out from Docker Hub and removes your stored credentials.




================================




1. Create a Private Repository on GitHub
•	Go to https://github.com
•	Click 
•	New repository
•	Give it a name
•	Check Private
•	Click Create repository
 2. Initialize Git in Your Local Project (if not already done)
     Open a terminal in the root of your multi-folder project:
  	cd /path/to/your/project
  	git init
3. Add the Remote Repository (in bash)
You’ll see a URL on GitHub after creating the repo. It will look as below , run  this command in git bash:
	git remote add origin https://github.com/yourusername/your-private-repo.git
4. Add and Commit Your Files(in bash)
	git add .
	git commit -m "Initial commit"
5. Push to the Private Repository 
If the repo is new and empty, push like this from git bash:
	git push -u origin master
If you're using the main branch (GitHub default):
	git push -u origin main
You may be prompted to log in (via username/password or token).

Task 2: Students must explore all listed git commands on the multi-folder project in local and remote repository.
1.	Git  Commands:
●	git version : The command git version is used to check the version of git. 
git --version
•	git config: Configures Git settings. Commonly used to set up user information
git config --global user.name "Your Name"
git config --global user.email "youremail@example.com"
•	git config --list: Displays all the Git configurations for the current user.
2.	 Repository Management
•	git init: Initializes a new Git repository in the current directory
git init
•	git clone:  Creates a copy of an existing Git repository from a remote source (e.g., GitHub) to your local machine
	git clone https://github.com/username/repository.git
•	git remote –v : To see the remote repository that is connected to your local repository
 git remote –v

•	git remote add : To add a new remote repository to your local repository
  git remote add origin https://github.com/username/repository.git


•	Pushing Changes to Remote: To push your local commits to a remote repository:

         git push <remote_name> <branch_name>

		git push origin main

•	Pulling Updates from Remote: To pull the latest changes from the remote repository and merge them into your local branch
          git pull <remote_name> <branch_name>

          git pull origin main


•	git remote remove: To remove a remote repository from your local configuration:

            git remote remove <remote_name>

         git remote remove origin
•	Renaming a Remote:  to rename an existing remote: 

         git remote rename <old_name> <new_name>

	  git remote rename origin upstream

•	Fetching Updates from Remote: To fetch updates from the remote repository but not merge them into your local branch

	git fetch <remote_name>

•	Changing Remote URL : To change the URL of a remote (e.g., after changing the remote repository address):
	git remote set-url <remote_name> <new_url>

            git remote set-url origin https://github.com/username/new-repository.git

•	Viewing the Remote Repository’s Information: to see detailed information about a remote repository

            git remote show <remote_name>

            git remote show origin


3. Staging and Committing
•	git status: Shows the status of changes in your working directory and staging area. It tells you which files are untracked, modified, or ready to be committed.
git status
•	git add: Adds changes in the working directory to the staging area.
git add filename.txt   # Adds a specific file
git add .              # Adds all changes in the directory
•	git commit: Commits the staged changes to the repository with a descriptive message. The -m option allows you to include a commit message.
git commit -m "Commit message describing changes"
4. Branching and Merging
•	git branch: Lists all branches or creates a new branch
git branch                # Lists all branches or
git branch -a               # Lists all branches
git branch branch-name    # Creates a new branch
git branch -d <branch_name>    # Deletes a branch
                        Use -D to force-delete if it hasn't been merged.
•	Listing All Remote Branches :  To you want to list all branches on the remote repository
         git branch –r

•	git checkout: Switches to a different branch
git checkout branch-name  # Switches to an existing branch
git checkout -b new-branch # Creates and switches to a new branch
•	Pruning Deleted Remotes : If a branch was deleted on the remote but still shows up locally.
   git remote prune origin

When someone deletes a branch on the remote, your local Git doesn’t automatically remove the corresponding remote-tracking branch (like origin/old-feature).
git remote prune origin removes these outdated references.

•	Fetching a Specific Remote Branch: To fetch a specific branch from a remote.
     git fetch <remote_name> <branch_name>

	    git fetch origin feature-branch

•	Setting the Upstream Branch for Pushing : When pushing for the first time and want to set the remote branch you are pushing to:

	git push --set-upstream <remote_name> <branch_name>

       git push --set-upstream origin feature-branch

•	git merge: Merges the specified branch into the current branch. This command integrates the changes from the feature branch into the main branch.
git checkout main         # Switch to the main branch
git merge branch-name     # Merge branch-name into main
•	Rebasing a Local Branch onto a Remote Branch: If you want to rebase your local branch onto a remote branch (this can be useful to keep your history linear)
	git fetch <remote_name>
	git rebase <remote_name>/<branch_name>
Example:
	git fetch origin
	git rebase origin/main

5.	Undoing Changes

•	git reset : Removes the specified file from the staging area but leaves the working directory unchanged. git reset --hard can also reset the working directory and staging area to the last commit.
git reset <file>:
•	git revert: Creates a new commit that undoes the changes from a specified commit, leaving the history intact.
git revert <commit>:
6.	Viewing History

•	git log: Shows a history of commits in the repository, including commit hashes, messages, and timestamps. Use git log --oneline for a more concise view.
		git log:
•	git diff: Displays differences between various commits, the working directory, and the staging area. git diff without arguments shows changes not yet staged.
git diff:
•	git show:  Shows the details of a specific commit, including the changes made and the commit message.
git show <commit>
7.	To undo the changes made to file before staging it.

•	git restore filename
8.	To correct committed with the wrong message
•	git commit --amend -m "Corrected commit message"

9. Recovering deleted branches

•	git reflog
•	git checkout -b feature-ui <commit_hash>

10. To download the latest changes from the remote without merging
•	git fetch origin

11. To remove accidentally committed  sensitive file from Git history.

•	git filter-branch --force --index-filter \
•	"git rm --cached --ignore-unmatch secrets.txt" \
•	--prune-empty --tag-name-filter cat -- --all

12. To merge changes from another branch
First switch to branch where changes are to applied and then merge another-branch
•	git checkout previous-branch
•	git merge another-branch

13. To resolve a merge conflict manually
You tried to merge two branches and Git reported a conflict in x.js. Then for conflict resolution do:
1.	Open x.js and resolve/remove the conflict markers (<<<<<<<, =======, >>>>>>>)
2.	After resolving:
	git add app.js
	git commit  # If Git didn’t auto-create a merge commit

14. The .gitignore
The .gitignore file is used to tell Git which files or directories to ignore in your project. It's a useful way to avoid committing unnecessary files like log files, build outputs, and IDE configurations. 
a.	 Create a .gitignore File
In the root directory of your Git project, create a file called .gitignore 
touch .gitignore
b.	 Add Rules to .gitignore
Inside the .gitignore file, you add patterns for the files and directories you want Git to ignore. Each pattern should be written on a new line.
Here are some common examples:
•	Ignore all .log files:    *.log
•	Ignore a specific file:     secret_file.txt
•	Ignore all files in a temp/ directory:        temp/
•	Ignore all files except important_file.txt inside a folder:
folder/*
!folder/important_file.txt
•	Ignore files with a specific extension:    *.bak
15. To see who changed a particular line in a file
•	git blame login.js

16. Git stash
# You modified files A and B, but not committed them.
git stash             # saves changes and reverts to clean state
git switch another-branch
# do something else...
git switch main
git stash apply       # brings back your changes
17. To check branch is merge 
•	git branch –merged

If branch not merged then displays its name

18. To Delete multiple local branches at once

•	git branch –d branc1 branch2 branch3







=============================================
mvn clean → remove old build files

mvn compile → compile source code

mvn test → run tests

mvn package → create jar/war

mvn install → install into local repository

mvn dependency:tree → view dependency hierarchy

mvn help:effective-pom → see final configuration

<build>
    <plugins>
        <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-compiler-plugin</artifactId>
            <version>3.11.0</version>
            <configuration>
                <source>17</source> <!-- Java source version -->
                <target>17</target> <!-- Java bytecode version -->
            </configuration>
        </plugin>
    </plugins>
</build>
<groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-surefire-plugin</artifactId>
            <version>3.1.2</version>
            <configuration>
                <includes>
                    <include>**/*Test.java</include>
                </includes>
            </configuration>
<groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-jar-plugin</artifactId>
            <version>3.4.0</version>
            <configuration>
                <archive>
                    <manifest>
                        <addClasspath>true</addClasspath>
                        <mainClass>com.example.App</mainClass> <!-- Your main class -->
                    </manifest>
                </archive>
            </configuration>
<groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-war-plugin</artifactId>
            <version>3.4.1</version>
            <configuration>
                <warName>MyWebApp</warName>
            </configuration>
        </plugin>
<groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-site-plugin</artifactId>
            <version>3.12.0</version>
<dependency>
    <groupId>junit</groupId>
    <artifactId>junit</artifactId>
    <version>4.13.2</version>
    <scope>test</scope>
</dependency>
<dependency>
    <groupId>org.junit.jupiter</groupId>
    <artifactId>junit-jupiter</artifactId>
    <version>5.11.0</version>
    <scope>test</scope>
</dependency>
<dependency>
    <groupId>com.google.code.gson</groupId>
    <artifactId>gson</artifactId>
    <version>2.10.1</version>
</dependency>
<dependency>
    <groupId>com.google.code.gson</groupId>
    <artifactId>gson</artifactId>
    <version>2.10.1</version>
</dependency>
<dependency>
    <groupId>org.apache.commons</groupId>
    <artifactId>commons-lang3</artifactId>
    <version>3.13.0</version>
</dependency>
<dependency>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-starter-web</artifactId>
    <version>3.2.2</version>
</dependency>
<dependency>
    <groupId>mysql</groupId>
    <artifactId>mysql-connector-java</artifactId>
    <version>8.1.0</version>
</dependency>
<dependency>
    <groupId>javax.servlet</groupId>
    <artifactId>javax.servlet-api</artifactId>
    <version>4.0.1</version>
    <scope>provided</scope>
</dependency>
<dependency>
    <groupId>jakarta.servlet.jsp</groupId>
    <artifactId>jakarta.servlet.jsp-api</artifactId>
    <version>3.0.0</version> <!-- or latest -->
    <scope>provided</scope>
</dependency>


